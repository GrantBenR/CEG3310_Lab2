; z = x^y
; a. The x and y variables should exist in memory after loading your program (use .FILL)

; b. Assume (6 >= x >= 0) and (6 >= y >= 0)

; c. Store the result of your exponential operation into the memory address x8000 and HALT your program
.ORIG x3000

;Zero R0 and store in VAR_I
AND R0, R0, #0
ST R0, VAR_EXPCOUNTER
LD R0, VAR_X
ST R0, VAR_K

START_EXPLOOP

; If R0 - Y is negative, END_LOOP
LD R0, VAR_EXPCOUNTER
LD R1, VAR_Y
NOT R1, R1
ADD R1, R1, #1
ADD R0, R0, R1
BRzp END_EXPLOOP

AND R0, R0, #0
ADD R0, R0, #1
ST R0, VAR_MULTCOUNTER

START_MULTLOOP
; If R0 - X is negative, END_LOOP
LD R0, VAR_MULTCOUNTER
LD R1, VAR_X
NOT R1, R1
ADD R1, R1, #1
ADD R0, R0, R1
BRzp END_MULTLOOP


LD R0, VAR_Z
LD R1, VAR_K
ADD R0, R0, R1
ST R0, VAR_Z
LD R1, ASCII_CHARACTER
ADD R0, R0, R1
OUT
LD R0, ASCII_NEWLINE
OUT

; VAR_MULTCOUNTER ++
LD R0, VAR_MULTCOUNTER
ADD R0, R0, #1
ST R0, VAR_MULTCOUNTER

BRnzp START_MULTLOOP
END_MULTLOOP

; VAR_EXPCOUNTER ++
LD R0, VAR_EXPCOUNTER
ADD R0, R0, #1
ST R0, VAR_EXPCOUNTER

LD R0, VAR_Z
ST R0, VAR_K


BRnzp START_EXPLOOP
END_EXPLOOP


LD R3, VAR_Z
STI R3, OUTPUT_LOCATION
HALT

; VARIABLES:
VAR_EXPCOUNTER .FILL #1
VAR_MULTCOUNTER .FILL #1
VAR_X .FILL #2
VAR_Y .FILL #2
VAR_Z .FILL #0
VAR_K .FILL #0
OUTPUT_LOCATION .FILL x8000
ASCII_CHARACTER .FILL #48
ASCII_NEWLINE .FILL #10

.END